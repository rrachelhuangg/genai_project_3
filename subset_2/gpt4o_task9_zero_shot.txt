To create a REST API using Ktor with the given `Product` data class, you'll need to set up a basic Ktor application and define endpoints for handling GET and POST requests. Below is a step-by-step guide:

### Step 1: Set Up Your Ktor Project

1. **Create a new Ktor project**: Use IntelliJ IDEA with the Ktor plugin, or set up manually using Gradle or Maven.

2. **Dependencies**: Make sure your `build.gradle.kts` file includes the necessary Ktor dependencies:

   ```kotlin
   plugins {
       kotlin("jvm") version "1.8" // or any other compatible version
       id("io.ktor.plugin") version "2.3.1" // use the latest version of the Ktor plugin
   }

   repositories {
       mavenCentral()
   }

   dependencies {
       implementation("io.ktor:ktor-server-core-jvm:2.3.1")
       implementation("io.ktor:ktor-server-netty-jvm:2.3.1")
       implementation("io.ktor:ktor-server-content-negotiation:2.3.1")
       implementation("io.ktor:ktor-serialization-gson:2.3.1")  // or ktor-serialization-kotlinx-json if you prefer
       testImplementation("io.ktor:ktor-server-tests-jvm:2.3.1")
       testImplementation("org.jetbrains.kotlin:kotlin-test-junit:1.8")
   }
   ```

### Step 2: Define Your Product Data Class

```kotlin
// Product.kt
data class Product(val id: Int, val name: String, val price: Double)
```

### Step 3: Implement the Ktor Application

1. **Create a Ktor application**: Set up a basic Ktor server with embedded Netty.

2. **Define Routes**: Implement GET and POST endpoints for the `Product` resource.

Here is an example `Application.kt` with GET and POST endpoints:

```kotlin
// Application.kt

import io.ktor.application.*
import io.ktor.features.*
import io.ktor.gson.*
import io.ktor.http.*
import io.ktor.request.*
import io.ktor.response.*
import io.ktor.routing.*
import io.ktor.server.engine.*
import io.ktor.server.netty.*

fun main() {
    embeddedServer(Netty, port = 8080, module = Application::module).start(wait = true)
}

fun Application.module() {
    install(ContentNegotiation) {
        gson {
            // Configure gson if necessary
            setPrettyPrinting()
        }
    }

    routing {
        val products = mutableListOf(
            Product(1, "Laptop", 999.99),
            Product(2, "Smartphone", 599.99)
        )

        route("/products") {

            get {
                call.respond(products)
            }

            post {
                val product = call.receive<Product>()
                products.add(product)
                call.respond(HttpStatusCode.Created, product)
            }
        }
    }
}
```

### Step 4: Run Your Application

- Use your IDE to run the main function in the `Application.kt` file, or use the Gradle/Maven tasks.

### Step 5: Test Your Endpoints

- **GET request**: Access the endpoint using a browser or a tool like Postman at `http://localhost:8080/products`.

- **POST request**: Use Postman or curl to send a request to `http://localhost:8080/products` with a JSON body like:

  ```json
  {
      "id": 3,
      "name": "Tablet",
      "price": 299.99
  }
  ```

### Note:
This example uses Gson for JSON serialization, but you can switch to kotlinx.serialization if you prefer. Just update the dependencies and configuration accordingly. 

This code provides a basic RESTful service with simple in-memory storage. You can extend it by integrating with a database or adding more features like update and delete endpoints.