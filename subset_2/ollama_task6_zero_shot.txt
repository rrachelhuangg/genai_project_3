To create an SQL schema for a review app with users, books, and reviews, you'll need three tables: `Users`, `Books`, and `Reviews`. Below is a basic implementation of how these tables could be structured:

```sql
CREATE TABLE Users (
    user_id INT PRIMARY KEY AUTO_INCREMENT,
    username VARCHAR(50) NOT NULL UNIQUE,
    email VARCHAR(100) NOT NULL UNIQUE,
    password_hash VARCHAR(255) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE Books (
    book_id INT PRIMARY KEY AUTO_INCREMENT,
    title VARCHAR(255) NOT NULL,
    author VARCHAR(255) NOT NULL,
    isbn VARCHAR(20) UNIQUE,
    published_year INT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE Reviews (
    review_id INT PRIMARY KEY AUTO_INCREMENT,
    user_id INT NOT NULL,
    book_id INT NOT NULL,
    rating INT CHECK (rating >= 1 AND rating <= 5),
    review_text TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE,
    FOREIGN KEY (book_id) REFERENCES Books(book_id) ON DELETE CASCADE
);
```

### Explanation:

- **Users Table**:
  - `user_id`: A unique identifier for each user. It uses `AUTO_INCREMENT` to automatically generate a sequential ID.
  - `username`: A unique name for each user.
  - `email`: A unique email for communication and identification.
  - `password_hash`: A hashed password for security purposes.
  - `created_at`: Automatically records the timestamp when a user account is created.

- **Books Table**:
  - `book_id`: A unique identifier for each book.
  - `title`: The title of the book.
  - `author`: The author of the book.
  - `isbn`: The International Standard Book Number, unique for each edition and variation (except reprints).
  - `published_year`: The year the book was published.
  - `created_at`: Automatically records the timestamp when a book entry is created.

- **Reviews Table**:
  - `review_id`: A unique identifier for each review.
  - `user_id`: A reference to the user who created the review. This establishes a one-to-many relationship between users and reviews.
  - `book_id`: A reference to the book that is being reviewed. This establishes a one-to-many relationship between books and reviews.
  - `rating`: An integer rating for the book, with a constraint that it must be between 1 and 5.
  - `review_text`: The text content of the review.
  - `created_at`: Automatically records the timestamp when a review is created.

Additional indexes, constraints, or table relationships could be added based on further application requirements, like indexing for faster search queries, additional user profile information, book genres, etc.