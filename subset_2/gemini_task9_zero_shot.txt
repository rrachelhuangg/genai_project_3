```kotlin
import io.ktor.server.application.*
import io.ktor.server.response.*
import io.ktor.server.routing.*
import io.ktor.server.netty.*
import io.ktor.server.plugins.contentnegotiation.*
import io.ktor.serialization.kotlinx.json.*
import io.ktor.server.request.*
import kotlinx.serialization.Serializable

@Serializable
data class Product(val id: Int, val name: String, val price: Double)

// Dummy in-memory data store
val products = mutableListOf<Product>(
    Product(1, "Laptop", 1200.0),
    Product(2, "Mouse", 25.0),
    Product(3, "Keyboard", 75.0)
)

fun main(args: Array<String>): Unit = EngineMain.main(args)

fun Application.module() {
    install(ContentNegotiation) {
        json()
    }

    routing {
        get("/products") {
            call.respond(products)
        }

        get("/products/{id}") {
            val id = call.parameters["id"]?.toIntOrNull()
            if (id == null) {
                call.respondBadRequest("Invalid product ID")
                return@get
            }

            val product = products.find { it.id == id }
            if (product == null) {
                call.respondNotFound("Product not found")
                return@get
            }

            call.respond(product)
        }

        post("/products") {
            try {
                val product = call.receive<Product>()

                // Simple validation (you should have proper validation logic)
                if (products.any { it.id == product.id }) {
                    call.respondBadRequest("Product with ID ${product.id} already exists")
                    return@post
                }

                products.add(product)
                call.respond(product) // Optionally return the created product
            } catch (e: Exception) {
                // Handle exceptions, e.g., invalid JSON
                call.respondBadRequest("Invalid product data: ${e.message}")
            }
        }

        // Example error handling (useful for consistent responses)
        fun ApplicationCall.respondBadRequest(message: String) {
            respond(io.ktor.http.HttpStatusCode.BadRequest, mapOf("error" to message))
        }

        fun ApplicationCall.respondNotFound(message: String) {
            respond(io.ktor.http.HttpStatusCode.NotFound, mapOf("error" to message))
        }

    }
}
```

Key improvements and explanations:

* **Serialization:** The `Product` data class is now annotated with `@Serializable` from `kotlinx.serialization`. This is *essential* for Ktor's JSON serialization to work correctly.  Add the `kotlinx.serialization` plugin in your `build.gradle.kts` file (see below).

* **Content Negotiation:**  `install(ContentNegotiation) { json() }` configures Ktor to automatically handle JSON serialization and deserialization.  This is how Ktor knows to convert Kotlin objects to JSON for responses and JSON from the request body to Kotlin objects.

* **GET `/products`:** This endpoint retrieves all products from the `products` list.

* **GET `/products/{id}`:**  This endpoint retrieves a single product by its ID.  It includes error handling:
    * Checks if the `id` parameter is valid (not null and a number).
    * Checks if a product with the given ID exists in the `products` list.
    * Returns appropriate HTTP status codes and error messages (400 Bad Request, 404 Not Found) if there are problems.

* **POST `/products`:** This endpoint creates a new product.  It uses `call.receive<Product>()` to automatically deserialize the JSON request body into a `Product` object.  It also includes error handling:
    * Uses a `try-catch` block to handle potential errors during JSON deserialization (e.g., invalid JSON format, missing fields).  This is crucial for preventing crashes.
    * Basic validation to prevent duplicate product IDs.  *Replace this with more robust validation in a real application.*  Validation is extremely important in API development.
    * Returns a 400 Bad Request with an error message if the JSON is invalid or validation fails.

* **Error Handling:**  Added extension functions `respondBadRequest` and `respondNotFound` to provide consistent error responses.  This is good practice for API design.  Use of `HttpStatusCode` enum for proper HTTP status codes. Returning a `mapOf("error" to message)` is a simple, consistent error format.

* **Clearer Error Messages:** More informative error messages are now included in the responses.

* **Complete Example:** This is a fully runnable example that you can copy and paste (after setting up the Gradle dependencies below).

**To Run this Example:**

1. **Create a new Kotlin project** in IntelliJ IDEA or your preferred IDE.

2. **Add the Ktor dependencies to your `build.gradle.kts` file (or `build.gradle`):**

```kotlin
plugins {
    kotlin("jvm") version "1.9.21" // Or the latest version
    id("io.ktor.plugin") version "2.3.7" // Or the latest version
    id("org.jetbrains.kotlin.plugin.serialization") version "1.9.21" // Add this line
}

group = "org.example"
version = "0.0.1"

repositories {
    mavenCentral()
}

dependencies {
    implementation("io.ktor:ktor-server-core-jvm:2.3.7") // Or the latest version
    implementation("io.ktor:ktor-server-netty-jvm:2.3.7") // Or the latest version
    implementation("ch.qos.logback:logback-classic:1.2.3") // Logging
    implementation("io.ktor:ktor-server-content-negotiation-jvm:2.3.7") //For content negotiation
    implementation("io.ktor:ktor-serialization-kotlinx-json-jvm:2.3.7") //For JSON serialization
    testImplementation("io.ktor:ktor-server-tests-jvm:2.3.7") //Testing
    testImplementation("org.jetbrains.kotlin:kotlin-test-junit:1.9.21") // Testing

    // Add kotlinx.serialization
    implementation("org.jetbrains.kotlinx:kotlinx-serialization-json:1.6.2") // Or the latest version
}
```

**Important Gradle Notes:**

* **`kotlinx.serialization` Plugin:**  The `id("org.jetbrains.kotlin.plugin.serialization")` line is critical.  This tells the Kotlin compiler to process the `@Serializable` annotations.  Without this, the code will compile, but serialization/deserialization won't work.
* **`kotlinx-serialization-json` Dependency:** This line adds the actual `kotlinx-serialization-json` library, which provides the JSON serialization engine.
* **Ktor Version:**  Make sure to use compatible versions of the Ktor dependencies.  The versions shown above are the latest as of writing but check for newer ones.
* **`jvm` suffix:** The dependencies ending in `-jvm` are necessary because you are targeting the JVM.

3. **Create the `Application.kt` file** with the code from the updated answer above.

4. **Run the application.**  The server will typically start on port 8080.

5. **Test the API endpoints:**

   * **GET all products:** `http://localhost:8080/products`
   * **GET product by ID:** `http://localhost:8080/products/1`
   * **POST a new product:**  Use a tool like `curl` or Postman to send a POST request to `http://localhost:8080/products` with a JSON body like this:

     ```json
     {
       "id": 4,
       "name": "Monitor",
       "price": 300.0
     }
     ```

   * **Error Handling:** Test sending invalid JSON or trying to create a product with a duplicate ID.  Verify that you get the expected error responses.

This revised solution provides a complete, working example with proper JSON serialization, error handling, and clear instructions for setup and testing.  It addresses the common pitfalls encountered when building REST APIs with Ktor.  Remember to always validate your data and handle potential exceptions.
