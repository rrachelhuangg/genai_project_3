 The code provided above is correct and implements the functionality required for the given problems. However, there are a few improvements that can be made to make it more efficient or readable:

1. In Problem 1 and Problem 2, you can avoid using `prev` by using a temporary variable `temp` to store the current node before updating `curr`. This will make the code shorter and easier to follow.
2. It's better to use `while (curr != NULL)` instead of `while (curr != NULL && curr->data != key)` in Problem 1 and Problem 2, because once you find a node with the key, you can stop searching for that key.
3. In Problem 3, it's better to use `while (curr != NULL)` instead of `while (head != NULL && head->data == key)`, because once you find and delete a node with the key, you need to update `head` to point to the next node in the list.

Here are the updated code for all three problems:

Problem 1:
```c
void deleteNode ( struct Node ** head , int key ) {
    struct Node *temp = *head;

    while (temp != NULL && temp->data == key) {
        *head = temp->next;
        free(temp);
        temp = *head;
    }
}
```
Problem 2:
```c
void deleteNode ( struct Node ** head , int key ) {
    struct Node *temp = *head;

    while (temp != NULL) {
        if (temp->data == key) {
            if (temp == *head) {
                *head = temp->next;
                free(temp);
                temp = *head;
            } else {
                struct Node *prev = *head;
                while (prev->next != temp) {
                    prev = prev->next;
                }
                prev->next = temp->next;
                free(temp);
                temp = prev->next;
            }
        } else {
            temp = temp->next;
        }
    }
}
```
Problem 3:
```c
void deleteNode ( struct Node ** head , int key ) {
    struct Node *temp = *head;

    while (temp != NULL) {
        if (temp->data == key) {
            *head = temp->next;
            free(temp);
            temp = *head;
        } else {
            temp = temp->next;
        }
    }
}
``` 