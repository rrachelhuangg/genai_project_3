 To convert the Kotlin data class to a REST API using Ktor, you need to perform the following steps:

Step 1: Create a new project in IntelliJ IDEA or any other preferred IDE.

Step 2: Add Ktor as a dependency to your project. You can add the following line to your `build.gradle` file if you're using Gradle:
```python
dependencies {
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.5.28'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.5.28'
    implementation 'io.ktor:ktor-client:1.6.0'
}
```
Step 3: Create a new class that extends `ApplicationCall.Pipeline.Extension<KtorClient>` to add the Ktor client extension to your project.
```kotlin
class KtorClientExtension(private val ktorClientFactory: () -> KtorHttpClient): Extension<KtorClientExtension> {
    override fun getValue(): KtorClientExtension {
        return this
    }
}
```
Step 4: Add the `KtorClientExtension` to your application's list of extensions. You can do this by adding the following line to your `Application.kt` file:
```kotlin
install(KtorClientExtension) {
    ktorClientFactory = ::createKtorHttpClient
}
```
Step 5: Create a new REST API endpoint that returns a JSON response indicating whether a given number is prime or not. You can create a new file called `IsPrimeEndpoint.kt` in the `src/main/kotlin` directory and add the following code to it:
```kotlin
import io.ktor.application.*
import io.ktor.http.*
import io.ktor.request.receive
import io.ktor.response.respond
import io.ktor.serialization.json
import kotlinx.serialization.Serializable
import kotlinx.serialization.decodeFromString
import kotlinx.serialization.encodeToJsonElement
import java.lang.Long

data class IsPrimeRequest(val number: Long)

fun main(args: Array<String>): Unit = io.ktor.server.netty.EngineMain.main(args)

@Serializable
data class IsPrimeResponse(val isPrime: Boolean)

class IsPrimeEndpoint(private val ktorClientFactory: () -> KtorHttpClient) : ApplicationCall.Pipeline.Extension<IsPrimeEndpoint> {
    override fun getValue(): IsPrimeEndpoint {
        return this
    }

    suspend fun handleRequest(): ApplicationCall.Response {
        val request = call.receive(IsPrimeRequest::class)
        if (request.number <= 1L) {
            return call.respond(HttpStatusCode.BadRequest, "Number must be greater than 1")
        }

        val isPrime = is_prime(request.number)
        val response = IsPrimeResponse(isPrime)
        return call.respond(HttpStatusCode.OK, response)
    }
}
```
Step 6: Register the `IsPrimeEndpoint` to your application's routing. You can do this by adding the following line to your `Application.kt` file:
```kotlin
routing {
    post("/is-prime") {
        val endpoint = IsPrimeEndpoint(ktorClientFactory)
        endpoint.handleRequest()
    }
}
```
Step 7: Start the Ktor server by adding the following line to your `Application.kt` file:
```kotlin
main(args = arrayOf("--port", "8080")) {
    embeddedServer(Netty, port = 8080) {
        install(ContentNegotiation) {
            json()
        }
        install(KtorClientExtension) {
            ktorClientFactory = ::createKtorHttpClient
        }
        routing {
            post("/is-prime") {
                val endpoint = IsPrimeEndpoint(ktorClientFactory)
                endpoint.handleRequest()
            }
        }
    }.start(wait = true)
}
```
That's it! You now have a REST API endpoint that accepts a number as input and returns whether it is prime or not in JSON format. You can test the API by sending an HTTP POST request to `http://localhost:8080/is-prime?number=3`, for example. 