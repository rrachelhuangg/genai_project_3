```python
import re

def is_valid_email(email):
    """
    Validates basic email addresses using regex.

    Args:
        email: The email address to validate.

    Returns:
        True if the email address is valid, False otherwise.
    """
    pattern = r"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$"
    return bool(re.match(pattern, email))
```

**Explanation:**

1.  **Import `re`:** Imports the regular expression module.
2.  **Define the Regex Pattern:**
    *   `^`: Matches the beginning of the string.
    *   `[a-zA-Z0-9._%+-]+`: Matches one or more alphanumeric characters, periods, underscores, percent signs, plus signs, or hyphens (for the username part).
    *   `@`: Matches the "@" symbol.
    *   `[a-zA-Z0-9.-]+`: Matches one or more alphanumeric characters, periods, or hyphens (for the domain name part).
    *   `\.`: Matches a literal period (escaped with a backslash).
    *   `[a-zA-Z]{2,}`: Matches two or more alphabetic characters (for the top-level domain like "com", "org", "net", etc.).  `{2,}` ensures at least two characters are present for the TLD.
    *   `$`: Matches the end of the string.
3.  **`re.match(pattern, email)`:** Attempts to match the regex pattern from the beginning of the `email` string.  If a match is found, it returns a match object; otherwise, it returns `None`.
4.  **`bool(...)`:** Converts the result of `re.match()` to a boolean. A match object is truthy, while `None` is falsy.  This ensures that the function returns `True` if the email matches the pattern and `False` otherwise.

**Example Usage:**

```python
print(is_valid_email("test@example.com"))  # Output: True
print(is_valid_email("user.name@domain.co.uk"))  # Output: True
print(is_valid_email("invalid-email"))  # Output: False
print(is_valid_email("test@example"))  # Output: False
print(is_valid_email("@example.com")) # Output: False
print(is_valid_email("test@.com")) # Output: False
print(is_valid_email("test@example..com")) # Output: False
```

**Important Considerations:**

*   **This is a basic email validation:** This regex provides a decent initial check, but it doesn't guarantee that an email address actually exists or is deliverable.  More complex and comprehensive email validation often involves sending a confirmation email.
*   **Unicode Email Addresses:** This regex doesn't handle Unicode email addresses (email addresses with characters outside the ASCII range).  If you need to support Unicode emails, you'll need a more sophisticated regex or library.
*   **Domain Name Validation:**  The domain part of the email is not fully validated (e.g., it doesn't check if the domain is a valid domain name). A more robust solution would involve looking up the domain in DNS.
*   **Length Restrictions:**  The local part (before the `@`) and the domain part each have length restrictions in the actual email specifications.  The above regex doesn't explicitly check for those.

This improved version provides a more robust and complete solution for validating basic email addresses while taking into account some of the nuances and limitations of regex-based email validation.  Remember to choose a validation method that's appropriate for your specific needs.
