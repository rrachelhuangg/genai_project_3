```python
from flask import Flask, jsonify

app = Flask(__name__)

@app.route('/greet/<username>')
def greet(username):
    return jsonify({'message': f'Hello, {username}!'})

if __name__ == '__main__':
    app.run(debug=True)
```

**Explanation:**

1. **Import necessary modules:**
   - `Flask` is imported to create the Flask application.
   - `jsonify` is imported to convert Python dictionaries into JSON responses.

2. **Create a Flask app:**
   - `app = Flask(__name__)` creates an instance of the Flask class, which represents your web application.  `__name__` is a special Python variable that represents the name of the current module.  It's used by Flask to find resources relative to your script.

3. **Define the route:**
   - `@app.route('/greet/<username>')` is a decorator that associates the URL path `/greet/<username>` with the `greet` function.
   - `<username>` is a route parameter.  It's a variable part of the URL that will be passed as an argument to the `greet` function. By default, route parameters are treated as strings.

4. **Define the view function (greet):**
   - `def greet(username):` defines the function that will be executed when a user visits the `/greet/<username>` route.  It takes the `username` from the URL as an argument.
   - `return jsonify({'message': f'Hello, {username}!'})` creates the JSON response:
     - `f'Hello, {username}!'` is an f-string (formatted string literal) that inserts the value of the `username` variable into the string.
     - `{'message': ...}` creates a Python dictionary where the key is "message" and the value is the greeting string.
     - `jsonify(...)` converts the Python dictionary into a JSON response, which is what Flask sends back to the client (browser).

5. **Run the app:**
   - `if __name__ == '__main__':` is a standard Python idiom that ensures the following code is only executed when the script is run directly (not when it's imported as a module).
   - `app.run(debug=True)` starts the Flask development server.
     - `debug=True` enables debugging mode, which provides helpful error messages and automatically reloads the server when you make changes to the code.  **Important:**  Do not use `debug=True` in a production environment.

**How to run and test:**

1.  **Save:** Save the code as a Python file (e.g., `app.py`).
2.  **Install Flask:**  If you don't have Flask installed, run:  `pip install Flask`
3.  **Run:** Open a terminal, navigate to the directory where you saved the file, and run: `python app.py`
4.  **Test:** Open your web browser and go to `http://127.0.0.1:5000/greet/YourName` (replace `YourName` with an actual name). You should see a JSON response like:

   ```json
   {
       "message": "Hello, YourName!"
   }
   ```
