```python
import re

def is_valid_email(email):
    """
    Checks if a string is a valid email address using a basic regex.
    """
    pattern = r"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$"
    match = re.match(pattern, email)
    return bool(match)
```

**Explanation:**

*   `^`: Matches the beginning of the string.
*   `[a-zA-Z0-9._%+-]+`: Matches one or more alphanumeric characters (a-z, A-Z, 0-9), periods (.), underscores (\_), percent signs (%), plus signs (+), or hyphens (-). This part covers the "username" part of the email address.
*   `@`: Matches the "@" symbol, which separates the username and domain.
*   `[a-zA-Z0-9.-]+`: Matches one or more alphanumeric characters, periods, or hyphens. This represents the domain name.
*   `\.`: Matches a literal period (.).  It needs to be escaped with a backslash because "." is a special character in regular expressions (it matches any character).
*   `[a-zA-Z]{2,}`: Matches two or more alphabetic characters. This represents the top-level domain (e.g., "com", "org", "net", "us"). The `{2,}` ensures that the TLD has at least two characters.
*   `$`: Matches the end of the string.

**Important Notes on Email Validation:**

*   **Simplicity:** This regex provides a basic level of email validation. It's suitable for simple cases.  Real-world email validation can be much more complex.
*   **False Positives:**  This regex might reject some valid email addresses (false positives) because it doesn't cover all possible valid formats.  Email addresses can have unusual characters and longer TLDs.
*   **False Negatives:**  It might also accept some invalid email addresses (false negatives) because it doesn't perform a thorough syntax check or verify the existence of the domain.
*   **Domain Existence:** The regex cannot verify if the domain actually exists. For that, you would need to perform a DNS lookup.
*   **Best Practices:**  For robust email validation, consider using a dedicated email validation library or service, rather than relying solely on a simple regex. These libraries often incorporate more comprehensive checks and domain verification.
*   **Character Escaping:**  Be mindful of character escaping in regular expressions. Special characters (like `.`, `+`, `*`, `?`, `[`, `]`, `^`, `$`, `(`, `)`, `{`, `}`, `|`, `\`) need to be escaped with a backslash (`\`) if you want to match them literally.

**Example Usage:**

```python
print(is_valid_email("test@example.com"))        # True
print(is_valid_email("user.name@domain.org"))   # True
print(is_valid_email("invalid-email"))           # False
print(is_valid_email("missing@tld"))            # False
print(is_valid_email("test@example"))            # False
print(is_valid_email("test@.com"))               # False
print(is_valid_email("test@example..com"))        # False

```
